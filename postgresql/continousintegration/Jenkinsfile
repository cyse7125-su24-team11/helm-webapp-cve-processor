pipeline {
    agent any
    environment {
        GITHUB_CREDENTIALS_ID = 'GH_CRED'
        GITHUB_REPO_OWNER = 'cyse7125-su24-team11'
        GITHUB_REPO_NAME = 'helm-webapp-cve-processor'
    }
    stages {

        stage('Checkout') {
            steps {
                withCredentials([usernamePassword(credentialsId: GITHUB_CREDENTIALS_ID, usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_TOKEN')]) {
                    script{
                        def prCommitSHA = sh(script: "git ls-remote https://${GITHUB_USERNAME}:${GITHUB_TOKEN}@github.com/${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}.git refs/pull/${env.CHANGE_ID}/head | cut -f1", returnStdout: true).trim()
                        echo "PR Commit SHA: ${prCommitSHA}"
                        env.PR_COMMIT_SHA = prCommitSHA
                    }
                }
                // git branch: 'main',
                //     changelog: false,
                //     credentialsId: 'GH_CRED',
                //     poll: false,
                //     url: 'https://github.com/cyse7125-su24-team11/helm-webapp-cve-processor.git'
            }
        }

        stage('Helm Lint and Template') {
            steps {
                script {
                    def templateResult = sh(script: 'helm template .', returnStatus: true)
                    if (templateResult != 0) {
                        currentBuild.result = 'FAILURE'
                        error('Helm template failed')
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                setGitHubCommitStatus('Succeeded', 'All checks have passed!', ${GITHUB_CREDENTIALS_ID})
            }
        }
        failure {
            script {
                setGitHubCommitStatus('Failed', 'One or more checks have failed!', ${GITHUB_CREDENTIALS_ID})
            }
        }
    }
}

def setGitHubCommitStatus(String state, String description, String GITHUB_CREDENTIALS_ID) {
    withCredentials([usernamePassword(credentialsId: GITHUB_CREDENTIALS_ID, usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_TOKEN')]) {
        sh "curl -u ${GITHUB_USERNAME}:${GITHUB_TOKEN} -X POST https://api.github.com/repos/${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}/statuses/${env.PR_COMMIT_SHA} -d '{\"state\": \"${state}\", \"description\": \"${description}\", \"context\": \"Jenkins CI\"}'"
    }
}
 