pipeline {
    agent any
    triggers {
        githubPush()
    }
    environment {
        GH_TOKEN = credentials('SEM_REL')
        GITHUB_CREDENTIALS_ID = 'GH_CRED'
        GITHUB_REPO_OWNER = 'cyse7125-su24-team11'
        GITHUB_REPO_NAME = 'helm-webapp-cve-processor'
        CHART_PATH = './postgresql'
        HELM_INSTALL_DIR = "${env.HOME}/.local/bin"  // Directory to install Helm
        PATH = "${env.HELM_INSTALL_DIR}:${env.PATH}"  // Add the install directory to PATH
        HELM_VERSION = 'v3.15.1'  // Specify the desired Helm version here

    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    changelog: false,
                    credentialsId: 'GH_CRED',
                    poll: false,
                    url: 'https://github.com/cyse7125-su24-team11/helm-webapp-cve-processor.git'
            }
        }
        stage('PR') {
            steps {
                withCredentials([usernamePassword(credentialsId: GITHUB_CREDENTIALS_ID, usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_TOKEN')]) {
                    script{
                        def prCommitSHA = sh(script: "git ls-remote https://${GITHUB_USERNAME}:${GITHUB_TOKEN}@github.com/${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}.git refs/pull/${env.CHANGE_ID}/head | cut -f1", returnStdout: true).trim()
                        echo "PR Commit SHA: ${prCommitSHA}"
                        env.PR_COMMIT_SHA = prCommitSHA
                    }
                }
            }
        }
        
        stage('Install Helm') {
            steps {
                script {
                    sh '''
                    # Create the install directory if it doesn't exist
                    mkdir -p ${HELM_INSTALL_DIR}

                    # Download and extract Helm binary
                    curl -fsSL -o helm.tar.gz https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz
                    tar -zxvf helm.tar.gz
                    mv linux-amd64/helm ${HELM_INSTALL_DIR}/helm
                    
                    # Clean up downloaded files
                    rm helm.tar.gz
                    rm -rf linux-amd64
                    '''
                }
            }
        }

        stage('Helm Lint and Template') {
            steps {
                script {
                    sh  '''
                    helm lint postgresql/
                    helm template postgresql/
                    '''
                }
            }
        }
        stage('Semantic Release and Update Chart Version') {
            steps {
                withCredentials([usernamePassword(credentialsId: GITHUB_CREDENTIALS_ID, usernameVariable: 'GH_USERNAME', passwordVariable: 'GH_TOKEN')]) 
                {
                    withEnv(["GH_TOKEN=${GH_TOKEN}"]){
                        script {
                            //env.GIT_LOCAL_BRANCH = 'main'
                            def releaseOutput = sh(script: 'npx semantic-release --dry-run --json', returnStdout: true).trim()
                            def versionLine = releaseOutput.find(/Published release (\d+\.\d+\.\d+) on default channel/)
     
                            if (versionLine) {
                                // Extract the new version
                                def newVersion = (versionLine =~ /(\d+\.\d+\.\d+)/)[0][0]
                                echo "New version: v${newVersion}"
                                // Update Chart.yaml with the new version
    
    
                                sh """
                                    sed -i 's/version:.*/version: ${newVersion}/' ./postgresql/Chart.yaml
                                    
                                    #chmod -R 755 ./postgresql/
                                    helm package --version ${newVersion} ./postgresql/
                                    gh release create 'v${newVersion}' *${newVersion}.tgz
                                    
                                """
                            } else {
                                error "Failed to capture the new version from semantic-release."
                            }
                        }
                    }
                }
            }
        }
    }
}