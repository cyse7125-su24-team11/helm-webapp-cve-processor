pipeline {
    agent any
    triggers {
        githubPush()
    }
    environment {
        GH_TOKEN = credentials('GH_CRED')
        GITHUB_CREDENTIALS_ID = 'GH_CRED'
        GITHUB_REPO_OWNER = 'cyse7125-su24-team11'
        GITHUB_REPO_NAME = 'helm-webapp-cve-processor'
        CHART_PATH = './postgresql'
        HELM_INSTALL_DIR = "${env.HOME}/.local/bin"  // Directory to install Helm
        PATH = "${env.HELM_INSTALL_DIR}:${env.PATH}"  // Add the install directory to PATH
        HELM_VERSION = 'v3.15.1'  // Specify the desired Helm version here

    }
    stages {

        stage('Checkout') {
            steps {
                git branch: 'main',
                    changelog: false,
                    credentialsId: 'GH_CRED',
                    poll: false,
                    url: 'https://github.com/cyse7125-su24-team11/helm-webapp-cve-processor.git'
            }
        }
        stage('PR') {
            steps {
                withCredentials([usernamePassword(credentialsId: GITHUB_CREDENTIALS_ID, usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_TOKEN')]) {
                    script{
                        def prCommitSHA = sh(script: "git ls-remote https://${GITHUB_USERNAME}:${GITHUB_TOKEN}@github.com/${GITHUB_REPO_OWNER}/${GITHUB_REPO_NAME}.git refs/pull/${env.CHANGE_ID}/head | cut -f1", returnStdout: true).trim()
                        echo "PR Commit SHA: ${prCommitSHA}"
                        env.PR_COMMIT_SHA = prCommitSHA
                    }
                }
            }
        }
        
        stage('Install Helm') {
            steps {
                script {
                    sh '''
                    # Create the install directory if it doesn't exist
                    mkdir -p ${HELM_INSTALL_DIR}

                    # Download and extract Helm binary
                    curl -fsSL -o helm.tar.gz https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz
                    tar -zxvf helm.tar.gz
                    mv linux-amd64/helm ${HELM_INSTALL_DIR}/helm
                    
                    # Clean up downloaded files
                    rm helm.tar.gz
                    rm -rf linux-amd64
                    '''
                }
            }
        }

        stage('Helm Lint and Template') {
            steps {
                script {
                    sh  '''
                    helm lint postgresql/
                    helm template postgresql/
                    '''
                }
            }
        }
        stage('Semantic Release and Update Chart Version') {
            steps {
                script {
                        // Semantic release
                        sh '''
                        npm install semantic-release
                        npx semantic-release --config .release/.releaserc.yml
                        '''

                        // Get the new version
                        def newVersion = sh(script: 'npx semantic-release --dry-run | grep "next version" | grep -oP "[0-9]+\\.[0-9]+\\.[0-9]+"', returnStdout: true).trim()

                        // Update Chart.yaml with new version
                        sh "sed -i 's/^version:.*/version: ${newVersion}/' ${CHART_PATH}/Chart.yaml"
                }
            }
        }

        stage('Create Release') {
            steps {
                script {
                    // Get the chart name and version
                    def chartInfo = readYaml file: "${CHART_PATH}/Chart.yaml"
                    def chartName = chartInfo.name
                    def chartVersion = chartInfo.version

                    // Create a zip file with the chart name and version
                    sh "cd ${CHART_PATH} && zip -r ${chartName}-${chartVersion}.zip ."

                    // Create a GitHub release
                    def releaseResponse = sh(
                        script: """
                            curl -s -H "Authorization: token ${GITHUB_CREDENTIALS}" \
                                    -H "Content-Type: application/json" \
                                    -X POST \
                                    -d '{
                                        "tag_name": "${chartVersion}",
                                        "target_commitish": "main",
                                        "name": "${chartVersion}",
                                        "body": "Release of version ${chartVersion}",
                                        "draft": false,
                                        "prerelease": false
                                        }' \
                                    https://api.github.com/repos/cyse7125-su24-team11/helm-webapp-cve-processor/releases
                        """,
                        returnStdout: true
                    ).trim()

                    // Extract the release id
                    def releaseId = new groovy.json.JsonSlurper().parseText(releaseResponse).id

                    // Upload the zip file to the GitHub release
                    sh """
                        curl -s -H "Authorization: token ${GITHUB_CREDENTIALS}" \
                                -H "Content-Type: application/zip" \
                                --data-binary @${CHART_PATH}/${chartName}-${chartVersion}.zip \
                                https://uploads.github.com/repos/cyse7125-su24-team11/helm-webapp-cve-processor/releases/${releaseId}/assets?name=${chartName}-${chartVersion}.zip
                    """
                }
            }
        }  
    }
      
}